"""
This type stub file was generated by pyright.
"""

from tkinter import ttk

"""
Author: RedFantom
License: GNU GPLv3
Source: This repository
"""
class ItemsCanvas(ttk.Frame):
    """
    A :class:`ttk.Frame` containing a Canvas upon which text items can be placed with a coloured background. 
    
    The items can be moved around and deleted. A background can also be set.
    """
    def __init__(self, *args, **kwargs) -> None:
        """
        Create an ItemsCanvas.
        
        :param canvaswidth: width of the canvas in pixels
        :type canvaswidth: int
        :param canvasheight: height of the canvas in pixels
        :type canvascanvasheightwidth: int
        :param callback_add: callback for when an item is created, \*(int item, int rectangle)
        :type callback_add: function
        :param callback_del: callback for when an item is deleted, \*(int item, int rectangle)
        :type callback_del: function
        :param callback_move: callback for when an item is moved, \*(int item, int rectangle, int x, int y)
        :type callback_move: function
        :param function_new: user defined function for when an item is created, \*(self.add_item)
        :type function_new: function
        """
        ...
    
    def left_press(self, event): # -> None:
        """
        Callback for the press of the left mouse button.

        Selects a new item and sets its highlightcolor.
        
        :param event: Tkinter event
        """
        ...
    
    def left_release(self, event): # -> None:
        """
        Callback for the release of the left button.

        :param event: Tkinter event
        """
        ...
    
    def left_motion(self, event): # -> None:
        """
        Callback for the B1-Motion event, or the dragging of an item.

        Moves the item to the desired location, but limits its movement to a
        place on the actual Canvas. The item cannot be moved outside of the Canvas.

        :param event: Tkinter event
        """
        ...
    
    def right_press(self, event): # -> None:
        """
        Callback for the right mouse button event to pop up the correct menu.
        
        :param event: Tkinter event
        """
        ...
    
    def grid_widgets(self): # -> None:
        """Put the widgets in the correct position."""
        ...
    
    def add_item(self, text, font=..., backgroundcolor=..., textcolor=..., highlightcolor=...): # -> None:
        """
        Add a new item on the Canvas.
        
        :param text: text to display
        :type text: str
        :param font: font of the text
        :type font: tuple or :class:`~tkinter.font.Font`
        :param backgroundcolor: background color
        :type  backgroundcolor: str
        :param textcolor: text color
        :type  textcolor: str
        :param highlightcolor: the color of the text when the item is selected
        :type  highlightcolor: str
        """
        ...
    
    def del_item(self): # -> None:
        """Delete the current item on the Canvas."""
        ...
    
    def set_background(self, image=..., path=..., resize=...): # -> None:
        """
        Set the background image of the Canvas.
        
        :param image: background image
        :type image: PhotoImage
        :param path: background image path
        :type path: str
        :param resize: whether to resize the image to the Canvas size
        :type resize: bool
        """
        ...
    
    def cget(self, key): # -> None:
        """
        Query widget option.

        :param key: option name
        :type key: str
        :return: value of the option

        To get the list of options for this widget, call the method :meth:`~ItemsCanvas.keys`.
        """
        ...
    
    def config(self, **kwargs): # -> None:
        """
        Configure resources of the widget.

        To get the list of options for this widget, call the method :meth:`~ItemsCanvas.keys`.
        See :meth:`~ItemsCanvas.__init__` for a description of the widget specific option.
        """
        ...
    
    configure = ...
    def __getitem__(self, item): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def keys(self): # -> list[str]:
        ...
    
    def set_current(self): # -> None:
        ...
    


