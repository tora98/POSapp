"""
This type stub file was generated by pyright.
"""

import tkinter as tk
from tkinter import ttk

"""
Author: RedFantom and Juliette Monsel
License: GNU GPLv3
Source: This repository
"""
class ScaleEntry(ttk.Frame):
    """
    A simple combination of a Scale and an Entry widget suitable for use with int ranges.
    """
    def __init__(self, master=..., scalewidth=..., entrywidth=..., from_=..., to=..., orient=..., compound=..., entryscalepad=..., **kwargs) -> None:
        """
        Create a ScaleEntry.
        
        :param master: master widget
        :type master: widget
        :param scalewidth: width of the Scale in pixels
        :type scalewidth: int
        :param entrywidth: width of the Entry in characters
        :type entrywidth: int
        :param from\_: start value of the scale
        :type from\_: int
        :param to: end value of the scale
        :type to: int
        :param orient: scale orientation. Supports :obj:`tk.HORIZONTAL` and :obj:`tk.VERTICAL`
        :type orient: str
        :param compound: side the Entry must be on. Supports :obj:`tk.LEFT`,
                         :obj:`tk.RIGHT`, :obj:`tk.TOP` and :obj:`tk.BOTTOM`
        :type compound: str
        :param entryscalepad: space between the entry and the scale
        :type entryscalepad: int
        :param kwargs: keyword arguments passed on to the :class:`ttk.Frame` initializer
        """
        ...
    
    def __getitem__(self, key): # -> Any | int | str:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def keys(self): # -> list[str]:
        ...
    
    def cget(self, key): # -> Any | int | str:
        """
        Query widget option.

        :param key: option name
        :type key: str
        :return: value of the option

        To get the list of options for this widget, call the method :meth:`~ScaleEntry.keys`.
        """
        ...
    
    def cget_entry(self, key): # -> Any:
        """
        Query the Entry widget's option.

        :param key: option name
        :type key: str
        :return: value of the option
        """
        ...
    
    def cget_scale(self, key): # -> Any:
        """
        Query the Scale widget's option.

        :param key: option name
        :type key: str
        :return: value of the option
        """
        ...
    
    def configure(self, cnf=..., **kw): # -> None:
        """
        Configure resources of the widget.

        To get the list of options for this widget, call the method :meth:`~ScaleEntry.keys`.
        See :meth:`~ScaleEntry.__init__` for a description of the widget specific option.
        """
        ...
    
    config = ...
    def config_entry(self, cnf=..., **kwargs): # -> None:
        """Configure resources of the Entry widget."""
        ...
    
    def config_scale(self, cnf=..., **kwargs): # -> None:
        """Configure resources of the Scale widget."""
        ...
    
    @property
    def value(self): # -> int:
        """Get the value of the :class:`LimitedIntVar` instance of the class."""
        ...
    
    class LimitedIntVar(tk.IntVar):
        """Subclass of :class:`tk.IntVar` that allows limits in the value of the variable stored."""
        def __init__(self, low, high) -> None:
            ...
        
        def configure(self, **kwargs): # -> None:
            """Configure the limits of the LimitedIntVar."""
            ...
        
        def set(self, value): # -> bool:
            """
            Set a new value.

            Check whether value is in limits first. If not, return False and set
            the new value to either be the minimum (if value is smaller than the
            minimum) or the maximum (if the value is larger than the maximum).
            Both str and int are supported as value types, as long as the str
            contains an int.

            :param value: new value
            :type value: int
            """
            ...
        
    
    


