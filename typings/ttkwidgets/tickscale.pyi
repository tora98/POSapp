"""
This type stub file was generated by pyright.
"""

from tkinter import ttk

"""
Author: Juliette Monsel
License: GNU GPLv3
Source: This repository
"""
class TickScale(ttk.Frame):
    """
    A :class:`ttk.Scale` that can display the current value next to the slider and
    supports ticks.
    """
    def __init__(self, master=..., **kwargs) -> None:
        """
        Create a TickScale with parent master.

        :param master: master widget
        :type master: widget
        :param digits: number of digits after the comma to display, 
                       if negative use the %g format
        :type digits: int
        :param labelpos: "n", "s", "e or "w": if showvalue is True, 
                          position of the label
        :type labelpos: str
        :param resolution: increment by which the slider can be moved. 
                           0 means continuous sliding.
        :type resolution: float
        :param showvalue: whether to display current value next to the slider
        :type showvalue: bool
        :param tickinterval: if not 0, display ticks with the given interval
        :type tickinterval: float
        :param tickpos: "w" or "e" (vertical scale), "n" or "s" (horizontal scale): if tickinterval is not 0, position of the ticks
        :type tickpos: str
        :param kwargs: options to be passed on to the :class:`ttk.Scale` initializer
                       (class, cursor, style, takefocus, command, from, 
                       length, orient, to, value, variable)

        .. note:: The style must derive from "Vertical.TScale" or 
                  "Horizontal.TScale" depending on the orientation. 
                  Depending on the theme, the default slider length 
                  might not be correct. If it is the case, this can
                  be solve by setting the 'sliderlength' through 
                  :class:`ttk.Style`.
        """
        ...
    
    def __getitem__(self, item): # -> bool | float | str | int | Any:
        ...
    
    def __setitem__(self, item, value): # -> None:
        ...
    
    def keys(self): # -> list[str]:
        ...
    
    def cget(self, key): # -> bool | float | str | int | Any:
        """
        Query widget option.

        :param key: option name
        :type key: str
        :return: value of the option

        To get the list of options for this widget, call the method :meth:`~TickScale.keys`.
        """
        ...
    
    def configure(self, cnf=..., **kw):
        """
        Configure resources of the widget.

        To get the list of options for this widget, call the method :meth:`~TickScale.keys`.
        See :meth:`~TickScale.__init__` for a description of the widget specific option.
        """
        ...
    
    config = ...
    def get(self): # -> float:
        ...
    
    def convert_to_pixels(self, value):
        """
        Convert value in the scale's unit into a position in pixels.
        
        :param value: value to convert
        :type value: float
        
        :return: the corresponding position in pixels
        :rtype: float
        """
        ...
    


