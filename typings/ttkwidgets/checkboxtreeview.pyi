"""
This type stub file was generated by pyright.
"""

from tkinter import ttk

"""
Author: Juliette Monsel
License: GNU GPLv3
Source: This repository

Treeview with checkboxes at each item and a noticeable disabled style
"""
IM_CHECKED = ...
IM_UNCHECKED = ...
IM_TRISTATE = ...
class CheckboxTreeview(ttk.Treeview):
    """
    :class:`ttk.Treeview` widget with checkboxes left of each item.
    
    .. note::
        The checkboxes are done via the image attribute of the item, 
        so to keep the checkbox, you cannot add an image to the item.
    """
    def __init__(self, master=..., **kw) -> None:
        """
        Create a CheckboxTreeview.

        :param master: master widget
        :type master: widget
        :param kw: options to be passed on to the :class:`ttk.Treeview` initializer
        """
        ...
    
    def expand_all(self): # -> None:
        """Expand all items."""
        ...
    
    def collapse_all(self): # -> None:
        """Collapse all items."""
        ...
    
    def check_all(self): # -> None:
        """Check all items."""
        ...
    
    def uncheck_all(self): # -> None:
        """Uncheck all items."""
        ...
    
    def state(self, statespec=...):
        """
        Modify or inquire widget state.
        
        :param statespec: Widget state is returned if `statespec` is None, 
                          otherwise it is set according to the statespec 
                          flags and then a new state spec is returned 
                          indicating which flags were changed.
        :type statespec: None or sequence[str]
        """
        ...
    
    def change_state(self, item, state): # -> None:
        """
        Replace the current state of the item.

        i.e. replace the current state tag but keeps the other tags.
        
        :param item: item id
        :type item: str
        :param state: "checked", "unchecked" or "tristate": new state of the item 
        :type state: str
        """
        ...
    
    def tag_add(self, item, tag): # -> None:
        """
        Add tag to the tags of item.
        
        :param item: item identifier
        :type item: str
        :param tag: tag name
        :type tag: str
        """
        ...
    
    def tag_del(self, item, tag): # -> None:
        """
        Remove tag from the tags of item.
        
        :param item: item identifier
        :type item: str
        :param tag: tag name
        :type tag: str
        """
        ...
    
    def insert(self, parent, index, iid=..., **kw): # -> str:
        """
        Creates a new item and return the item identifier of the newly created item.
        
        :param parent: identifier of the parent item
        :type parent: str
        :param index: where in the list of parent's children to insert the new item
        :type index: int or "end"
        :param iid: item identifier, iid must not already exist in the tree. If iid is None a new unique identifier is generated.
        :type iid: None or str
        :param kw: other options to be passed on to the :meth:`ttk.Treeview.insert` method
        
        :return: the item identifier of the newly created item
        :rtype: str

        .. note:: Same method as for the standard :class:`ttk.Treeview` but 
                  add the tag for the box state accordingly to the parent 
                  state if no tag among 
                  ('checked', 'unchecked', 'tristate') is given.
        """
        ...
    
    def get_checked(self): # -> list[Any]:
        """Return the list of checked items that do not have any child."""
        ...
    


